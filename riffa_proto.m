function [methodinfo,structs,enuminfo,ThunkLibName]=riffa_proto
%RIFFA_PROTO Create structures to define interfaces found in 'riffa'.

%This function was generated by loadlibrary.m parser version  on Sun Dec 13 17:18:49 2015
%perl options:'riffa.i -outfile=riffa_proto.m -thunkfile=riffa_thunk_pcwin64.c -header=riffa.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'riffa_thunk_pcwin64');
%  int __cdecl fpga_list ( fpga_info_list * list ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='fpga_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'fpga_info_listPtr'};fcnNum=fcnNum+1;
%  fpga_t * __cdecl fpga_open ( int id ); 
fcns.thunkname{fcnNum}='voidPtrint32Thunk';fcns.name{fcnNum}='fpga_open'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fpga_tPtr'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void __cdecl fpga_close ( fpga_t * fpga ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='fpga_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fpga_tPtr'};fcnNum=fcnNum+1;
%  int __cdecl fpga_send ( fpga_t * fpga , int chnl , void * data , int len , int destoff , int last , long long timeout ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32int32int32int64Thunk';fcns.name{fcnNum}='fpga_send'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'fpga_tPtr', 'int32', 'voidPtr', 'int32', 'int32', 'int32', 'int64'};fcnNum=fcnNum+1;
%  int __cdecl fpga_recv ( fpga_t * fpga , int chnl , void * data , int len , long long timeout ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32int64Thunk';fcns.name{fcnNum}='fpga_recv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'fpga_tPtr', 'int32', 'voidPtr', 'int32', 'int64'};fcnNum=fcnNum+1;
%  void __cdecl fpga_reset ( fpga_t * fpga ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='fpga_reset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fpga_tPtr'};fcnNum=fcnNum+1;
structs.fpga_info_list.members=struct('num_fpgas', 'int32', 'id', 'int32#5', 'num_chnls', 'int32#5', 'name', 'int8#80', 'vendor_id', 'int32#5', 'device_id', 'int32#5');
structs.fpga_t.members=struct('');
methodinfo=fcns;